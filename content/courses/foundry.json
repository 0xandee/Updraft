{
  "id": "ec5bc4d6-9638-48da-a92a-d956a4b38003",
  "title": "Foundry Fundamentals",
  "slug": "foundry",
  "folderName": "foundry",
  "trailerUrl": "",
  "previewImg": "https://res.cloudinary.com/droqoz7lg/image/upload/v1701193477/updraft/courses/ccrmrt6nnfgcyuk2o7bu.png",
  "description": "Already know Solidity? Your next step is Foundry! Learn how to manage your dependencies, compile your project, run tests, deploy, and interact with your from the command-line and via Solidity scripts.",
  "path": "Solidity Developer",
  "number": 0,
  "overview": {
    "learnings": "Foundry introduction, smart contracts development, oracles, smart contracts testing, intengration testing, forge test, local smart contracts deployment",
    "preRequisites": [
      "Blockchain basics",
      "Solidity fundamentals"
    ]
  },
  "duration": 10,
  "authors": [
    {
      "author": "content/authors/patrick-collins.json"
    },
    {
      "author": "content/authors/richard-gottleber.json"
    },
    {
      "author": "content/authors/vasiliy-gualoto.json"
    }
  ],
  "sections": [
    {
      "number": 1,
      "id": "b224a5a3-2e7f-4c8d-b5a2-c95980b6f011",
      "title": "Foundry Simple Storage",
      "slug": "foundry-simple-storage",
      "folderName": "1-foundry-simple-storage",
      "lessons": [
        {
          "id": "1583c486-11aa-4273-96e4-69f0b1f86392",
          "number": 1,
          "title": "Introduction - Foundry simple storage",
          "slug": "introduction-foundry-simple-storage",
          "folderName": "1-introduction-foundry-simple-storage",
          "description": "Introduction to transitioning from Remix IDE to Foundry for professional smart contract development, along with resources for troubleshooting.",
          "duration": 7,
          "videoUrl": "i22RLgAu51g",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/1-introduction-foundry-simple-storage/+page.md",
          "updates": []
        },
        {
          "id": "8cd5e9ef-3879-4af3-b2b2-ba4135ed238e",
          "number": 2,
          "title": "Development environment setup (Mac, Linux)",
          "slug": "development-environment-setup-mac-linux",
          "folderName": "2-Mac-Linux-Install",
          "description": "Guide to setting up a development environment on Mac and Linux, including installing Visual Studio Code (VSCode) and Git.",
          "duration": 3,
          "videoUrl": "hqAtBgSBzPQ",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/2-Mac-Linux-Install/+page.md",
          "updates": []
        },
        {
          "id": "1dc6bc68-2034-4861-a2bd-8b7f96e42f1e",
          "number": 3,
          "title": "Development environment setup (Windows)",
          "slug": "development-environment-setup-windows",
          "folderName": "3-Windows-Install",
          "description": "Tutorial on setting up a development environment on Windows using WSL (Windows Subsystem for Linux) and installing Visual Studio Code.",
          "duration": 8,
          "videoUrl": "4O_GbjwhoFU",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/3-Windows-Install/+page.md",
          "updates": []
        },
        {
          "id": "f6c97bd6-2af2-4865-8076-d02bef7f32c9",
          "number": 4,
          "title": "Develop in cloud using Gitpod",
          "slug": "introduction-to-gitpod",
          "folderName": "4-gitpod",
          "description": "Overview of using Gitpod for cloud-based development, highlighting its benefits, limitations, and precautions for usage.",
          "duration": 5,
          "videoUrl": "z4jpbjQVnKQ",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/4-gitpod/+page.md",
          "updates": []
        },
        {
          "id": "e01f8186-fca4-4adc-be04-47d5c0720b66",
          "number": 5,
          "title": "Foundry setup",
          "slug": "foundry-setup",
          "folderName": "5-foundry-install",
          "description": "Step-by-step guide on installing and operating Foundry, a tool for smart contract development, compatible with Windows, Linux, and MacOS.",
          "duration": 8,
          "videoUrl": "VBYFeGO9vWc",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/5-foundry-install/+page.md",
          "updates": []
        },
        {
          "id": "ac591636-d3a2-47be-b1fd-b63e3f30733e",
          "number": 6,
          "title": "Setup your VSCode",
          "slug": "vscode-setup",
          "folderName": "6-vscode-setup-ii",
          "description": "Comprehensive guide on mastering Visual Studio Code and GitHub Copilot for optimizing programming efficiency and project folder organization.",
          "duration": 6,
          "videoUrl": "h9_3Ir-8Q0U",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/6-vscode-setup-ii/+page.md",
          "updates": []
        },
        {
          "id": "55d7a32c-4040-47d0-81d5-9ca08b816ddf",
          "number": 7,
          "title": "Create a new Foundry project",
          "slug": "create-new-foundry-setup",
          "folderName": "7-foundry-setup",
          "description": "Step-by-step instructions on creating a new simple storage project using Foundry, including project folder setup, terminal tips, and initial project structure.",
          "duration": 8,
          "videoUrl": "v6Srr9C1HRQ",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/7-foundry-setup/+page.md",
          "updates": []
        },
        {
          "id": "ae54a24e-9fce-457f-af4d-b68b7fb6716b",
          "number": 8,
          "title": "VSCode Solidity setup",
          "slug": "vscode-solidity-setup",
          "folderName": "8-formatting-solidity",
          "description": "Tutorial on formatting Solidity code in Visual Studio Code using various extensions and settings, and tips for automatic code formatting and TOML file formatting.",
          "duration": 5,
          "videoUrl": "8l55rHHpta0",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/8-formatting-solidity/+page.md",
          "updates": []
        },
        {
          "id": "e1a7e1f7-508a-440c-b39b-7bcbf0c54e07",
          "number": 9,
          "title": "Compile a smart contract using Foundry",
          "slug": "compiling-a-smart-contract-foundry",
          "folderName": "9-compiling-in-foundry",
          "description": "Guide to compiling Solidity smart contracts using Foundry, including steps for using the Foundry console, understanding the 'out' file, and terminal command recall.",
          "duration": 2,
          "videoUrl": "9UYIyBdW1Do",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/9-compiling-in-foundry/+page.md",
          "updates": []
        },
        {
          "id": "46f0d83a-62be-4095-a9e5-d91c37ef111e",
          "number": 10,
          "title": "Deploy a smart contract locally using Ganache",
          "slug": "deploy-smart-contract-locally",
          "folderName": "10-deploying-locally",
          "description": "Guide on deploying smart contracts locally using Ganache and Foundry's Anvil, including setting up Ganache, using MetaMask for custom networks, and integrating Anvil.",
          "duration": 8,
          "videoUrl": "IK2irq6_2fw",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/10-deploying-locally/+page.md",
          "updates": []
        },
        {
          "id": "d147ac70-b450-43ae-b1a2-4a0a2a7b5508",
          "number": 11,
          "title": "How to add a new network to Metamask",
          "slug": "how-to-add-a-new-network-to-metamask",
          "folderName": "11-adding-network-metamask",
          "description": "Tutorial on adding new Ganache local chains and EVM compatible chains to MetaMask, including managing private keys and understanding RPC URLs.",
          "duration": 2,
          "videoUrl": "oYBRneM_Oes",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/11-adding-network-metamask/+page.md",
          "updates": []
        },
        {
          "id": "20ac66c6-015c-4c7a-a2b6-1d98cf01b686",
          "number": 12,
          "title": "Deploy a smart contract locally using Forge",
          "slug": "deploying-locally-forge-foundry",
          "folderName": "12-deploying-locally-ii",
          "description": "Comprehensive guide on deploying smart contracts locally using Forge in Foundry, detailing command line usage, potential issues, and deployment steps.",
          "duration": 5,
          "videoUrl": "U-9vmmu-JFk",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/12-deploying-locally-ii/+page.md",
          "updates": []
        },
        {
          "id": "4ca84002-b8be-41ed-9a09-12f9e0e0ebcf",
          "number": 13,
          "title": "Important: private key safety pt.1",
          "slug": "private-key-safety",
          "folderName": "13-private-key-safety",
          "description": "In-depth guide on private key safety for blockchain developers, covering best practices, shell history clearing, and secure methods for handling private keys.",
          "duration": 3,
          "videoUrl": "7ILrx8KiTUQ",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/13-private-key-safety/+page.md",
          "updates": []
        },
        {
          "id": "5067bfa3-74e2-4129-9135-227e19a335ee",
          "number": 14,
          "title": "Deploy a smart contract locally using Anvil",
          "slug": "deploying-locally-anvil",
          "folderName": "14-deploying-locally-iii",
          "description": "Tutorial on deploying smart contracts locally using Anvil, focusing on script creation, Solidity contract language, and Foundry cheat codes for deployment.",
          "duration": 10,
          "videoUrl": "-PMG_wlBxfY",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/14-deploying-locally-iii/+page.md",
          "updates": []
        },
        {
          "id": "48917e07-fc94-487f-a44b-d6ad433b7094",
          "number": 15,
          "title": "What is a transaction",
          "slug": "what-is-a-transaction",
          "folderName": "15-what-is-a-transaction",
          "description": "Exploration of blockchain transactions, including a detailed overview of transaction components, contract deployment, and data fields in Ethereum.",
          "duration": 6,
          "videoUrl": "56tWg7CUVrI",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/15-what-is-a-transaction/+page.md",
          "updates": []
        },
        {
          "id": "220b2276-4fbd-4acc-b754-6b5ca719684f",
          "number": 16,
          "title": "Important: private key safety pt.2",
          "slug": "private-key-safety-part-2",
          "folderName": "16-private-key-safety-ii",
          "description": "Guide on private key safety for interacting with deployed contracts, covering command line interfaces, environment file setup, and secure coding practices.",
          "duration": 11,
          "videoUrl": "yhvxeP1Vkfc",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/16-private-key-safety-ii/+page.md",
          "updates": []
        },
        {
          "id": "5b0806c9-eb4f-4258-aa8c-f5f8e89b32cb",
          "number": 17,
          "title": "Deploy a smart contract using Thirdweb",
          "slug": "thirdweb-deploy",
          "folderName": "17-thirdweb-deploy",
          "description": "Introduction to deploying smart contracts using Thirdweb, including benefits, ease of use, and features for secure and efficient contract deployment.",
          "duration": 5,
          "videoUrl": "6dfV-0Hwft8",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/17-thirdweb-deploy/+page.md",
          "updates": []
        },
        {
          "id": "1acf7564-9d3d-40b9-8baf-e867f61a589e",
          "number": 18,
          "title": "Interact with a smart contract using the CLI",
          "slug": "interact-with-smart-contract-cli",
          "folderName": "18-cast-send",
          "description": "Comprehensive guide on interacting with smart contracts using CLI and Foundry's Cast tool, detailing command usage for sending transactions and reading blockchain data.",
          "duration": 4,
          "videoUrl": "-qH4FuEUcZ8",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/18-cast-send/+page.md",
          "updates": []
        },
        {
          "id": "c230292c-5fc1-4d55-9a2e-b86a2413ff0b",
          "number": 19,
          "title": "Deploying a smart on the testnet (Sepolia)",
          "slug": "deploying-smart-contract-testnet-sepolia",
          "folderName": "19-deploying-to-a-testnet",
          "description": "Step-by-step tutorial on deploying smart contracts to Ethereum's Sepolia testnet using Foundry and Alchemy, including setting up RPC URLs and private keys.",
          "duration": 6,
          "videoUrl": "PTUk1XPPwdA",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/19-deploying-to-a-testnet/+page.md",
          "updates": []
        },
        {
          "id": "2674ff49-7364-4444-a9a0-7d5fed16a387",
          "number": 20,
          "title": "Verify a smart contract on Etherscan",
          "slug": "verify-smart-contract-etherscan",
          "folderName": "20-manual-verification",
          "description": "Guide on verifying Ethereum smart contracts on Etherscan, covering manual verification steps and the importance of contract readability and accessibility.",
          "duration": 2,
          "videoUrl": "JwYz5kj4FdI",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/20-manual-verification/+page.md",
          "updates": []
        },
        {
          "id": "8df7e063-f1a6-4a5d-8bdd-d9b201f5b5dc",
          "number": 21,
          "title": "Cleaning up the project",
          "slug": "cleaning-up-the-project",
          "folderName": "21-cleaning-up",
          "description": "Tutorial on cleaning up a coding project, emphasizing formatting consistency using Forge and crafting an informative README file with Markdown.",
          "duration": 3,
          "videoUrl": "oqSxjeEy8CU",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/21-cleaning-up/+page.md",
          "updates": []
        },
        {
          "id": "c36079de-f431-4182-a2e2-da18aa6adbb7",
          "number": 22,
          "title": "Introduction to Alchemy",
          "slug": "introduction-to-alchemy",
          "folderName": "22-alchemy-mempool",
          "description": "Introduction to Alchemy, a developer platform for Web3 applications, covering its features, benefits, and steps to create an account and use its services.",
          "duration": 12,
          "videoUrl": "HehY5DCtPWc",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/22-alchemy-mempool/+page.md",
          "updates": []
        },
        {
          "id": "56e13acc-9c52-46bd-adc3-bf8d138c100b",
          "number": 23,
          "title": "Wrap up, congratulations!",
          "slug": "summary-congratulations",
          "folderName": "23-summary-congratulations",
          "description": "Summary and congratulations on completing the Foundry project, highlighting key learnings, tools used, and encouraging continued learning and coding practice.",
          "duration": 3,
          "videoUrl": "kj-E0_uO9i0",
          "rawMarkdownUrl": "/routes/foundry/1-foundry-simple-storage/23-summary-congratulations/+page.md",
          "updates": []
        }
      ]
    },
    {
      "number": 2,
      "id": "105de61f-72fe-46d3-bfc4-8a2460e38d21",
      "title": "Foundry Fund Me",
      "slug": "foundry-fund-me",
      "folderName": "2-foundry-fund-me",
      "lessons": [
        {
          "id": "bba0c0f7-79cc-4a28-a9f8-3b3165ecbb52",
          "number": 1,
          "title": "Fund Me project setup",
          "slug": "fund-me-project-setup",
          "folderName": "1-fund-me-setup",
          "description": "Introduction to the Foundry FundMe project, including setting up GitHub, understanding the FundMe contract, exploring storage and state variables, and creating a new Foundry project folder.",
          "duration": 5,
          "videoUrl": "gXtqmMaBYPw",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/1-fund-me-setup/+page.md",
          "updates": []
        },
        {
          "id": "23135955-1931-478b-8023-2ebe899162b3",
          "number": 2,
          "title": "Introduction to smart contracts testing",
          "slug": "smart-contract-testing-introduction",
          "folderName": "2-testing-introduction",
          "description": "A guide on testing smart contracts using the `forge test` command and the `counter.t.sol` example, emphasizing the importance of test-driven development in programming.",
          "duration": 2,
          "videoUrl": "-e-ssPkqJUo",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/2-testing-introduction/+page.md",
          "updates": []
        },
        {
          "id": "d70c58eb-09aa-43d6-8cec-824516710bbb",
          "number": 3,
          "title": "Finishing the setup",
          "slug": "finshing-the-setup",
          "folderName": "3-setup-continued",
          "description": "Continuation of the project setup, including cleaning up unnecessary files, incorporating contracts from Remix, resolving import errors, and directing imports with remappings.",
          "duration": 6,
          "videoUrl": "qF3WqBwisPE",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/3-setup-continued/+page.md",
          "updates": []
        },
        {
          "id": "8df6e47f-e894-46cd-b1b7-63cf527f9a7d",
          "number": 4,
          "title": "Writing tests for your Solidity smart contract",
          "slug": "writing-tests-for-solidity-smart-contracts",
          "folderName": "4-tests",
          "description": "Detailed explanation on writing and running tests for Solidity smart contracts, including creating test files, understanding the setup function, and using console logs for debugging.",
          "duration": 9,
          "videoUrl": "eu3Wu9PcsW0",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/4-tests/+page.md",
          "updates": []
        },
        {
          "id": "b8f5d1cf-2554-41d8-9240-a3069d854c7a",
          "number": 5,
          "title": "Debug your Solidity tests",
          "slug": "debugging-tests",
          "folderName": "5-debugging-tests",
          "description": "A guide to debugging tests in Solidity, including writing and analyzing test functions, using console logs for troubleshooting, and understanding test failures.",
          "duration": 3,
          "videoUrl": "achXgiVg-FA",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/5-debugging-tests/+page.md",
          "updates": []
        },
        {
          "id": "b3ef4b83-29e1-41c9-861b-c62771925dfd",
          "number": 6,
          "title": "Advanced deploy scripts",
          "slug": "advanced-deploy-scripts",
          "folderName": "6-advanced-deploy-scripts",
          "description": "Tutorial on writing advanced deploy scripts for smart contracts in Solidity, focusing on avoiding hardcoded contract addresses and making contracts more dynamic and adaptable.",
          "duration": 3,
          "videoUrl": "vCnt4Cpjuvc",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/6-advanced-deploy-scripts/+page.md",
          "updates": []
        },
        {
          "id": "8b07077c-a7aa-41d9-86cd-f54d51dc678f",
          "number": 7,
          "title": "Running tests on chains forks",
          "slug": "forked-tests",
          "folderName": "7-forked-tests",
          "description": "Instructions on running tests on forked blockchain chains, ensuring functional price feed integrations, and addressing issues related to non-existent contract addresses.",
          "duration": 9,
          "videoUrl": "de7aY97S3wA",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/7-forked-tests/+page.md",
          "updates": []
        },
        {
          "id": "a2e5eb2f-09d0-46c2-833a-26becd480103",
          "number": 8,
          "title": "Refactoring your tests",
          "slug": "refactoring-testing",
          "folderName": "8-refactoring-testing",
          "description": "Guide on refactoring tests for better efficiency and clarity, including updating price converter functions and deploying contracts on different networks with ease.",
          "duration": 8,
          "videoUrl": "bhIb0Jf2qRk",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/8-refactoring-testing/+page.md",
          "updates": []
        },
        {
          "id": "39383e0f-19f1-4ba0-a1e7-56daebb424f0",
          "number": 9,
          "title": "Deploy a mock priceFeed",
          "slug": "refactoring-helper",
          "folderName": "9-refactoring-helper",
          "description": "Detailed guide on setting up a mocked environment for local testing of blockchain smart contracts, emphasizing the benefits and steps for creating mock contracts.",
          "duration": 14,
          "videoUrl": "YqnxsefqO5A",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/9-refactoring-helper/+page.md",
          "updates": []
        },
        {
          "id": "fd09e9da-514c-4146-863d-a9a9659c8c76",
          "number": 10,
          "title": "Refactoring the mock smart contract",
          "slug": "refactoring-mocks",
          "folderName": "10-refactoring-mocks",
          "description": "Comprehensive guide on refactoring mock smart contracts for local network testing, including deploying mock price feed contracts and overcoming common errors.",
          "duration": 5,
          "videoUrl": "7iHW8Ro_eog",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/10-refactoring-mocks/+page.md",
          "updates": []
        },
        {
          "id": "99094676-7af8-4cce-920e-c1b002502841",
          "number": 11,
          "title": "How to refactor magic number",
          "slug": "magic-numbers",
          "folderName": "11-magic-numbers",
          "description": "Explanation of the concept of magic numbers in Solidity code, their drawbacks, and strategies for avoiding them to maintain code readability and efficiency.",
          "duration": 3,
          "videoUrl": "EQUjA_xM2C8",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/11-magic-numbers/+page.md",
          "updates": []
        },
        {
          "id": "b00a1337-d0fb-4fb6-a1ea-9df92b026e22",
          "number": 12,
          "title": "Refactoring the mock smart contract pt.2",
          "slug": "refactoring-mocks-2",
          "folderName": "12-refactoring-mocks-2",
          "description": "Continuation of the tutorial on refactoring mock contracts in Solidity, focusing on creating network-agnostic smart contracts for easy deployment across multiple networks.",
          "duration": 5,
          "videoUrl": "6HztoOIetAQ",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/12-refactoring-mocks-2/+page.md",
          "updates": []
        },
        {
          "id": "f7cb3eb9-2da0-4843-b0fb-d6db0a6db13e",
          "number": 13,
          "title": "Foundry tests cheatcodes",
          "slug": "foundr-tests-cheatcodes",
          "folderName": "13-more-cheatcodes",
          "description": "Guide on using Foundry tests cheat codes for efficient and effective testing of smart contracts, focusing on deployment strategies, code coverage, and test understanding.",
          "duration": 13,
          "videoUrl": "pDb8XDYM8w0",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/13-more-cheatcodes/+page.md",
          "updates": []
        },
        {
          "id": "5f0631d9-6492-4995-8c79-431140cb12b5",
          "number": 14,
          "title": "Adding more coverage to the tests",
          "slug": "more-coverage",
          "folderName": "14-more-coverage",
          "description": "This lesson delves into advanced Solidity unit testing techniques. It includes writing robust tests for the 'getFunder' function and testing the contract owner's withdrawal function using the Arrange-Act-Assert methodology. The lesson aims to strengthen your code backend, making it almost bulletproof.",
          "duration": 15,
          "videoUrl": "IPgBsxL-SkE",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/14-more-coverage/+page.md",
          "updates": []
        },
        {
          "id": "6761590e-d73c-4e18-a19d-730f5b666548",
          "number": 15,
          "title": "Introduction to Foundry Chisel",
          "slug": "introduction-to-foundry-chisel",
          "folderName": "15-chisel",
          "description": "This lesson introduces Chisel, a tool for testing and debugging Solidity code directly in the terminal. It covers the basics of using Chisel, including launching the interactive shell, executing Solidity code, and exploring its functionalities. The lesson is a step-by-step guide to efficient Solidity testing.",
          "duration": 2,
          "videoUrl": "Qfac2hZ3ywA",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/15-chisel/+page.md",
          "updates": []
        },
        {
          "id": "b2817d50-67f7-49b7-826c-67021453f75c",
          "number": 16,
          "title": "Calculate Withdraw gas costs",
          "slug": "calculate-solidity-function-gas-costs",
          "folderName": "16-cheaper-withdraw",
          "description": "This lesson focuses on reducing gas consumption in Ethereum smart contracts. It explains how to evaluate gas costs, understand Anvil's zero gas-price, and utilize Solidity's built-in functions to optimize gas usage. The goal is to make contract execution more economical.",
          "duration": 5,
          "videoUrl": "TtEdnlZ2NSc",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/16-cheaper-withdraw/+page.md",
          "updates": []
        },
        {
          "id": "fe0f8efa-c582-4a5c-89d3-363fa12e9010",
          "number": 17,
          "title": "Introduction to Storage optimization",
          "slug": "solidity-storage-optimization",
          "folderName": "17-storage",
          "description": "In this lesson, you'll learn about optimizing Ethereum smart contract storage to reduce gas consumption. It covers storage variables, their impact on gas usage, and how to efficiently use storage and memory in Solidity. The lesson also includes practical examples using Anvil.",
          "duration": 10,
          "videoUrl": "8LAeGgkkoYw",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/17-storage/+page.md",
          "updates": []
        },
        {
          "id": "f3f4f5a4-ab08-4325-a072-eb9af95ca859",
          "number": 18,
          "title": "Optimise the withdraw function gas costs",
          "slug": "optimise-solidity-function-gas-costs",
          "folderName": "18-cheaper-withdraw-ii",
          "description": "This advanced lesson teaches how to optimize the 'withdraw' function in smart contracts for lower gas costs. It discusses bytecode analysis, storage and memory operations, and practical code changes to reduce gas usage. The lesson includes a comparative analysis of gas usage before and after optimization.",
          "duration": 8,
          "videoUrl": "ST_4j4vsadk",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/18-cheaper-withdraw-ii/+page.md",
          "updates": []
        },
        {
          "id": "698e9f4a-490b-4d3d-a344-eec70c6c49e7",
          "number": 19,
          "title": "Create integration tests",
          "slug": "solidity-integration-tests",
          "folderName": "19-interactions",
          "description": "Explore the creation of integration tests for Solidity smart contracts. This lesson covers the setup and execution of integration tests, ensuring that contract functions interact correctly with other system parts. It includes practical examples and a guide for setting up a comprehensive test suite.",
          "duration": 15,
          "videoUrl": "5u02NBfV4PY",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/19-interactions/+page.md",
          "updates": []
        },
        {
          "id": "ff41ef82-ab94-4081-a724-1a513e9b9a31",
          "number": 20,
          "title": "Automate your smart contracts actions - Makefile",
          "slug": "makefile",
          "folderName": "20-makefile",
          "description": "Learn to streamline your development workflow using Makefiles. This lesson teaches how to automate the building and deployment processes of smart contracts. It includes detailed examples of deploying to networks like Sepolia and setting up a comprehensive Makefile for various development tasks.",
          "duration": 9,
          "videoUrl": "Q3tvdSrm2vI",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/20-makefile/+page.md",
          "updates": []
        },
        {
          "id": "1b838275-adc8-4821-90b7-73c28e8b10cd",
          "number": 21,
          "title": "Pushing to Github",
          "slug": "pushing-to-github",
          "folderName": "21-pushing-to-github",
          "description": "This lesson guides you through the process of pushing your Solidity projects to GitHub. It covers best practices for using Git, managing sensitive information, and updating README files. The lesson is crucial for developers looking to showcase their work and collaborate in the crypto-community.",
          "duration": 16,
          "videoUrl": "OlxnxWLC4dQ",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/21-pushing-to-github/+page.md",
          "updates": []
        },
        {
          "id": "0f9c4792-c718-4dcc-ad07-95abf11a2481",
          "number": 22,
          "title": "Section recap",
          "slug": "section-recap",
          "folderName": "22-recap",
          "description": "This recap lesson summarizes key points from the course, including professional project setup, codebase refactoring, interaction scripts, gas and storage optimization, Makefiles, and GitHub repositories. It's a comprehensive review of the skills and knowledge gained in the course.",
          "duration": 2,
          "videoUrl": "6Jht0Us1vGw",
          "rawMarkdownUrl": "/routes/foundry/2-foundry-fund-me/22-recap/+page.md",
          "updates": []
        }
      ]
    },
    {
      "number": 3,
      "id": "b3b77063-6dfd-43d6-83b6-c0655a81d722",
      "title": "Fund Me Frontend",
      "slug": "html-fund-me",
      "folderName": "3-html-fund-me",
      "lessons": [
        {
          "id": "c9498599-1d48-42ab-a184-68cd69834483",
          "number": 1,
          "title": "How Metamask interacts with dapps",
          "slug": "setup",
          "folderName": "1-setup",
          "description": "Introduction to MetaMask interactions with websites, covering the basics of transaction transparency and setting up a basic JavaScript web application.",
          "duration": 4,
          "videoUrl": "883HH60QqDY",
          "rawMarkdownUrl": "/routes/foundry/3-html-fund-me/1-setup/+page.md",
          "updates": []
        },
        {
          "id": "ae529daa-722d-4124-8222-b631d6a43b0a",
          "number": 2,
          "title": "Introduction to window.ethereum",
          "slug": "metamask",
          "folderName": "2-metamask",
          "description": "Exploration of MetaMask's interaction with JavaScript websites, focusing on the use of the `window.ethereum` object and smart contract interactions.",
          "duration": 13,
          "videoUrl": "PL1H5tXwE3Q",
          "rawMarkdownUrl": "/routes/foundry/3-html-fund-me/2-metamask/+page.md",
          "updates": []
        },
        {
          "id": "23b9873a-e58f-4c21-a8db-4d3602e8b214",
          "number": 3,
          "title": "Decoding Ethereum transactions",
          "slug": "function-selectors",
          "folderName": "3-function-selectors",
          "description": "Guide to understanding and decoding Ethereum transaction data using function selectors, with practical examples of verifying transactions.",
          "duration": 8,
          "videoUrl": "qZjLWy9b9hI",
          "rawMarkdownUrl": "/routes/foundry/3-html-fund-me/3-function-selectors/+page.md",
          "updates": []
        },
        {
          "id": "bcb0296e-6981-43c8-9742-1bd4688fca06",
          "number": 4,
          "title": "Section recap",
          "slug": "summary",
          "folderName": "4-summary",
          "description": "Summary of web interactions and transactions, emphasizing the role of function selectors and the importance of secure and intelligent web navigation.",
          "duration": 5,
          "videoUrl": "EDaD5Ln1_u0",
          "rawMarkdownUrl": "/routes/foundry/3-html-fund-me/4-summary/+page.md",
          "updates": []
        }
      ]
    },
    {
      "number": 4,
      "id": "31c5e514-7427-479c-ad8c-1aebcf1e45ee",
      "title": "Smart Contract Lottery",
      "slug": "smart-contract-lottery",
      "folderName": "4-smart-contract-lottery",
      "lessons": [
        {
          "id": "56f7152b-6ccb-4c0a-be25-fb56cb797b0d",
          "number": 1,
          "title": "Smart contract lottery - Project setup",
          "slug": "setup",
          "folderName": "1-setup",
          "description": "Introduction to building an advanced lottery or raffle smart contract, covering key features like Chainlink automation and random number generation.",
          "duration": 12,
          "videoUrl": "gecEjRVNt34",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/1-setup/+page.md",
          "updates": []
        },
        {
          "id": "35905d3f-a802-4475-913d-c4af8ae829c8",
          "number": 2,
          "title": "Solidity style guide",
          "slug": "solidity-layout",
          "folderName": "2-solidity-layout",
          "description": "Exploration of Solidity's code layout and function ordering for efficient smart contract development.",
          "duration": 2,
          "videoUrl": "qnmKmB_pBvQ",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/2-solidity-layout/+page.md",
          "updates": []
        },
        {
          "id": "32c9ad50-2e26-4383-a292-4a57affc9db7",
          "number": 3,
          "title": "Creating custom errors",
          "slug": "solidity-custom-errors",
          "folderName": "3-custom-errors",
          "description": "Guidance on using custom errors in Solidity for gas-efficient and effective error checking.",
          "duration": 5,
          "videoUrl": "Og3_o7kFDRw",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/3-custom-errors/+page.md",
          "updates": []
        },
        {
          "id": "9d92bd94-45e2-4a05-ac64-b98f3d9fe717",
          "number": 4,
          "title": "Smart contracts events",
          "slug": "solidity-events",
          "folderName": "4-events",
          "description": "In this lesson we'll explore how to use events in Ethereum smart contracts, specifically in a lottery system context.",
          "duration": 12,
          "videoUrl": "69Yl2FEtbjc",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/4-events/+page.md",
          "updates": []
        },
        {
          "id": "62240b7f-d0a3-4182-9d00-ce5c2e738aba",
          "number": 5,
          "title": "Random numbers - Block Timestamp",
          "slug": "solidity-random-number-block-timestamp",
          "folderName": "5-block-timestamp",
          "description": "Insights into using block timestamps for random number generation in lottery smart contracts.",
          "duration": 4,
          "videoUrl": "0ZAXHzB4YWs",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/5-block-timestamp/+page.md",
          "updates": []
        },
        {
          "id": "a21bd474-1086-4fe8-8545-33f6c33da57e",
          "number": 6,
          "title": "Random numbers - Introduction to Chainlink VRF",
          "slug": "solidity-random-number-chainlink-vrf",
          "folderName": "6-chainlink-vrf",
          "description": "Introduction to using Chainlink VRF for generating random numbers in blockchain applications.",
          "duration": 11,
          "videoUrl": "A8obi954JXU",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/6-chainlink-vrf/+page.md",
          "updates": []
        },
        {
          "id": "e1986802-cc3d-40ed-8cbc-12e9375eb206",
          "number": 7,
          "title": "Implement the Chainlink VRF",
          "slug": "implementing-chainlink-vrf",
          "folderName": "7-implementing-vrf",
          "description": "Tutorial on deploying and integrating Chainlink VRF in smart contracts for random number generation.",
          "duration": 17,
          "videoUrl": "igV7TVPEIQY",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/7-implementing-vrf/+page.md",
          "updates": []
        },
        {
          "id": "023a2d78-25db-4e82-b91d-2e61a0a9ecb6",
          "number": 8,
          "title": "The modulo operation",
          "slug": "solidity-modulo-operation",
          "folderName": "8-modulo",
          "description": "Explanation of using the modulo operation for selecting random winners in smart contract games.",
          "duration": 6,
          "videoUrl": "Yuxpr_hX-lg",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/8-modulo/+page.md",
          "updates": []
        },
        {
          "id": "1adf37cf-e707-49fb-bd19-55505e872df4",
          "number": 9,
          "title": "Implementing the lottery state - Enum",
          "slug": "solidity-enum-lottery-state",
          "folderName": "9-enum",
          "description": "Discussion on using enums to manage different states in a raffle smart contract.",
          "duration": 5,
          "videoUrl": "gIZyar2-zQM",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/9-enum/+page.md",
          "updates": []
        },
        {
          "id": "6ded233d-f088-4db0-aa90-aab75f471d44",
          "number": 10,
          "title": "Lottery restart - Resetting an Array",
          "slug": "resetting-array",
          "folderName": "10-resetting-array",
          "description": "Exploration of resetting player arrays in smart contracts to start new game rounds.",
          "duration": 2,
          "videoUrl": "3xHdIO-FCOE",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/10-resetting-array/+page.md",
          "updates": []
        },
        {
          "id": "896f5895-3b03-4098-8852-857e03996efd",
          "number": 11,
          "title": "Important: Note on learning by building",
          "slug": "note-on-building",
          "folderName": "11-note-on-building",
          "description": "Insights into the true process of building solidity projects, highlighting the iterative nature of coding.",
          "duration": 2,
          "videoUrl": "DdVkEdkNwT4",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/11-note-on-building/+page.md",
          "updates": []
        },
        {
          "id": "1eb044f4-5ca5-49ff-a426-2d428dc7db5c",
          "number": 12,
          "title": "The CEI method - Checks, Effects, Interactions",
          "slug": "cei-method-checks-effects-interactions",
          "folderName": "12-cei",
          "description": "An overview of the Checks-Effects-Interactions pattern for secure and efficient smart contract development.",
          "duration": 3,
          "videoUrl": "rGbrYvJtOdc",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/12-cei/+page.md",
          "updates": []
        },
        {
          "id": "4ccf702a-906a-4dae-a78d-cc692656a4cd",
          "number": 13,
          "title": "Introduction to Chainlink Automation",
          "slug": "chainlink-automation",
          "folderName": "13-chainlink-automation",
          "description": "This lesson covers the basics of Chainlink Automation, essential for automating the 'Pick Winner' function in a lottery application. It delves into the use of Chainlink VRF for randomness and explores time-based automation and custom logic through Chainlink.",
          "duration": 16,
          "videoUrl": "6-bmw6VHZ6Q",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/13-chainlink-automation/+page.md",
          "updates": []
        },
        {
          "id": "28181c1e-a98a-47a4-b2f3-a246b5e6c62f",
          "number": 14,
          "title": "Implementing Chainlink Automation",
          "slug": "implementing-automation-2",
          "folderName": "14-implementing-automation-2",
          "description": "Focusing on implementing Chainlink Automation, this lesson teaches how to use `checkUpkeep` and `performUpkeep` functions for automated execution in Chainlink-powered smart contracts, enhancing their autonomy and efficiency.",
          "duration": 10,
          "videoUrl": "Y-Fl9kQtPHo",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/14-implementing-automation-2/+page.md",
          "updates": []
        },
        {
          "id": "d02f2d11-7ac8-4346-bd99-3a8f3c419fd6",
          "number": 15,
          "title": "Mid section recap",
          "slug": "lottery-mid-lesson-recap",
          "folderName": "15-mid-lesson-recap",
          "description": "A recap of the progress in developing a fair and transparent lottery system using Chainlink's VRF. The lesson revisits key concepts like the raffle contract, buying into the raffle, and the decentralized draw process.",
          "duration": 2,
          "videoUrl": "K253axaJs4k",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/15-mid-lesson-recap/+page.md",
          "updates": []
        },
        {
          "id": "0b490f27-ba53-435f-ac70-a67eb4fe0146",
          "number": 16,
          "title": "Tests and deploy the lotterys smart contract pt.1",
          "slug": "tests-and-deploy",
          "folderName": "16-tests-and-deploy",
          "description": "This lesson emphasizes the importance of testing and deploying smart contracts efficiently. It guides through creating deploy scripts and testing them on various networks, ensuring reliable and secure deployment of lottery contracts.",
          "duration": 8,
          "videoUrl": "u5V49-7YxkQ",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/16-tests-and-deploy/+page.md",
          "updates": []
        },
        {
          "id": "0abda7e1-6960-471e-9109-c23a26d116c1",
          "number": 17,
          "title": "Deploy a mock Chainlink VRF",
          "slug": "deploy-mock-chainlink-vrf",
          "folderName": "17-mock-chainlink-vrf",
          "description": "The focus of this lesson is on deploying a mock Chainlink VRF, vital for testing smart contracts. It provides insights into setting up mock contracts, adjusting parameters, and the importance of Chainlink VRF in blockchain development.",
          "duration": 5,
          "videoUrl": "2LwfdDw43Bk",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/17-mock-chainlink-vrf/+page.md",
          "updates": []
        },
        {
          "id": "6d7b200e-2f00-4f5a-93fc-c11051574b88",
          "number": 18,
          "title": "Tests and deploy the lotterys smart contract pt.2",
          "slug": "tests-and-deploy-2",
          "folderName": "18-tests-and-deploy-2",
          "description": "Continuing from the previous part, this lesson dives deeper into testing and deploying lottery smart contracts. It covers the usage of helper configurations and the integration of network-specific configurations for smooth deployment.",
          "duration": 9,
          "videoUrl": "vhKalATGI40",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/18-tests-and-deploy-2/+page.md",
          "updates": []
        },
        {
          "id": "7be9d513-2092-4406-8eff-045e1589265c",
          "number": 19,
          "title": "Setup the tests",
          "slug": "setup-solidity-lottery-tests",
          "folderName": "19-lots-of-tests",
          "description": "This lesson teaches the setup and execution of tests for smart contracts, emphasizing the significance of forge coverage and the Arrange-Act-Assert methodology to ensure robust and reliable smart contract functionality.",
          "duration": 5,
          "videoUrl": "7YhgCI_x_x4",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/19-lots-of-tests/+page.md",
          "updates": []
        },
        {
          "id": "5dda3821-5257-4e10-8980-e5e97370ea15",
          "number": 20,
          "title": "Testing events",
          "slug": "testing-events-solidity",
          "folderName": "20-testing-events",
          "description": "A detailed guide on testing events emitted by smart contracts, highlighting the use of Foundry's `expectEmit` function. The lesson focuses on ensuring correct event emissions, crucial for smart contract validation.",
          "duration": 4,
          "videoUrl": "jFsQeUAHLC0",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/20-testing-events/+page.md",
          "updates": []
        },
        {
          "id": "09041b73-1723-40e6-b3fa-5f5907280e23",
          "number": 21,
          "title": "Using vm.roll and vm.wrap",
          "slug": "vm-roll-warp",
          "folderName": "21-vm-roll-warp",
          "description": "Exploring the use of `vm.roll` and `vm.wrap` in smart contract testing, this lesson demonstrates how to adjust block time and number for testing various states and transitions in smart contracts.",
          "duration": 3,
          "videoUrl": "ydPyediH7qU",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/21-vm-roll-warp/+page.md",
          "updates": []
        },
        {
          "id": "336dea6a-f38c-4e01-9845-d1551f1325fa",
          "number": 22,
          "title": "Subscribing to events",
          "slug": "create-subscriptions",
          "folderName": "22-create-subscriptions",
          "description": "This lesson covers the process of deploying contracts, creating, and managing Chainlink VRF subscriptions. It focuses on resolving common errors and efficiently managing Chainlink VRF in smart contracts.",
          "duration": 12,
          "videoUrl": "oLvQR5FNCu0",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/22-create-subscriptions/+page.md",
          "updates": []
        },
        {
          "id": "588706e2-4bd4-4f14-863f-e8b666222610",
          "number": 23,
          "title": "Creating the subscription UI",
          "slug": "subscription-ui",
          "folderName": "23-subscription-ui",
          "description": "A guide to creating and managing front-end subscriptions for Ethereum Blockchain, this lesson covers steps from transaction initiation to automatic link token funding, emphasizing user interface interactions.",
          "duration": 4,
          "videoUrl": "WvxP4Lc2RBo",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/23-subscription-ui/+page.md",
          "updates": []
        },
        {
          "id": "73f1f9fb-9394-4e32-bb6d-e06009e3babc",
          "number": 24,
          "title": "Fund subscription",
          "slug": "fund-subscription",
          "folderName": "24-fund-subscription",
          "description": "This lesson teaches how to create and execute a contract script to fund blockchain subscriptions, detailing the parameters needed and the process of funding subscriptions using mock functions.",
          "duration": 13,
          "videoUrl": "DgPYEyiE8NQ",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/24-fund-subscription/+page.md",
          "updates": []
        },
        {
          "id": "f29c650a-74b8-4a00-8fb2-b3aa5b81c732",
          "number": 25,
          "title": "Adding a consumer",
          "slug": "add-consumer",
          "folderName": "25-add-consumer",
          "description": "Focusing on adding a consumer to a subscription, this lesson explains the process of adding a consumer contract to a Chainlink VRF subscription, using scripting to simplify the deployment and management.",
          "duration": 10,
          "videoUrl": "VxdPI856Ck4",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/25-add-consumer/+page.md",
          "updates": []
        },
        {
          "id": "c3314def-303b-4994-ac86-0999bf5b7b2f",
          "number": 26,
          "title": "Adding more tests",
          "slug": "more-tests",
          "folderName": "26-more-tests",
          "description": "A continuation of developing comprehensive tests for smart contracts, this lesson focuses on enhancing code coverage and efficiency in testing, particularly for the `check upkeep` function.",
          "duration": 7,
          "videoUrl": "VgkTCfdufBI",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/26-more-tests/+page.md",
          "updates": []
        },
        {
          "id": "6b573f84-8ab8-4eec-881f-c0d71cf12ca9",
          "number": 27,
          "title": "Testing and refactoring the performUpkeep",
          "slug": "test-and-refactor-perform-upkeep",
          "folderName": "27-perform-upkeep",
          "description": "This lesson delves into writing tests for the `performUpkeep` function, emphasizing the need for thorough testing and refactoring to ensure the reliability and efficiency of smart contracts.",
          "duration": 5,
          "videoUrl": "EIYRoNCkUz0",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/27-perform-upkeep/+page.md",
          "updates": []
        },
        {
          "id": "63c994b2-6e8e-4c73-ab50-1b4ec593c5c1",
          "number": 28,
          "title": "Refactoring events data",
          "slug": "event-data",
          "folderName": "28-event-data",
          "description": "A guide to refining the use of emitted events in smart contracts, this lesson covers extracting and utilizing event data, with a focus on testing and improving code efficiency.",
          "duration": 9,
          "videoUrl": "nliBD510_ck",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/28-event-data/+page.md",
          "updates": []
        },
        {
          "id": "6ee77112-cfa6-4c19-837e-7efcb03f8faf",
          "number": 29,
          "title": "Intro to fuzz testing",
          "slug": "intro-smart-contract-fuzz-testing",
          "folderName": "29-intro-fuzz-testing",
          "description": "Introducing fuzz testing in blockchain development, this lesson explores using random inputs for testing smart contracts, emphasizing the importance of mock functions and fuzz testing for secure and stable systems.",
          "duration": 4,
          "videoUrl": "aCY7nIMVLSY",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/29-intro-fuzz-testing/+page.md",
          "updates": []
        },
        {
          "id": "0e5e5907-79e4-44a5-810b-b2cc31b46b3f",
          "number": 30,
          "title": "One Big Test",
          "slug": "one-big-test",
          "folderName": "30-one-big-test",
          "description": "This lesson focuses on creating a comprehensive function test for a Raffle contract in a blockchain environment, covering the entire lifecycle of a raffle including entry, drawing, and prize distribution, and integrating Chainlink VRF in a test environment.",
          "duration": 11,
          "videoUrl": "rr4xH7YAQXc",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/30-one-big-test/+page.md",
          "updates": []
        },
        {
          "id": "c19283e4-ea96-419c-ae38-49d3ad8dfb3b",
          "number": 31,
          "title": "Forked test environment and dynamic private keys",
          "slug": "passing-private-key",
          "folderName": "31-passing-private-key",
          "description": "A guide on running tests in a forked test environment, addressing the challenges and solutions related to deployer identification. It covers the dynamics of testing smart contracts on different blockchain environments and the importance of dynamic deployer keys.",
          "duration": 15,
          "videoUrl": "SiO9HENjSl8",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/31-passing-private-key/+page.md",
          "updates": []
        },
        {
          "id": "1b90aea4-ceb7-4a6a-9aee-3b5f5301a2c4",
          "number": 32,
          "title": "Creating integration tests",
          "slug": "solidity-integration-tests",
          "folderName": "32-integration-tests",
          "description": "This lesson transitions from unit testing to integration testing in smart contract development, highlighting the significance of deploying and testing on testnets and mainnets. It offers insights into the practical aspects of ensuring smart contracts function as intended in a live blockchain environment.",
          "duration": 4,
          "videoUrl": "q_0eIzwxcrc",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/32-integration-tests/+page.md",
          "updates": []
        },
        {
          "id": "a5038a9e-e70b-4db1-b087-a1c9855e7a5d",
          "number": 33,
          "title": "Deploy the lottery on the testnet pt.1",
          "slug": "testnet-demo",
          "folderName": "33-testnet-demo",
          "description": "In this lesson, learners are guided through deploying a smart contract onto a testnet, using a Makefile for automation, and interacting with the live contract on Etherscan. It emphasizes the real-world application and testing of smart contracts.",
          "duration": 8,
          "videoUrl": "9h98l1o6Oqc",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/33-testnet-demo/+page.md",
          "updates": []
        },
        {
          "id": "6cce2a3f-4ff2-467b-ad07-6e69500bdb7f",
          "number": 34,
          "title": "Deploy the lottery on the testnet pt.2",
          "slug": "the-demo",
          "folderName": "34-the-demo",
          "description": "This lesson covers the deployment of a smart contract on the Sepolia testnet, including how to use a makefile for efficient deployment, verification, and interaction with the contract on Etherscan. It also discusses the role of Chainlink in the contract.",
          "duration": 7,
          "videoUrl": "jCOaOV_dzm4",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/34-the-demo/+page.md",
          "updates": []
        },
        {
          "id": "b92cbae2-aed6-4176-9787-c66526feb836",
          "number": 35,
          "title": "Implementing console log in your smart contract",
          "slug": "solidity-console-log-debug",
          "folderName": "35-console-log-debug",
          "description": "Focusing on debugging techniques in Solidity, this lesson teaches the implementation of console.log for debugging smart contracts. It highlights the importance of removing console logs before deploying to mainnet or testnet to save Ether and maintain efficiency.",
          "duration": 2,
          "videoUrl": "Xqe5x6LcgWA",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/35-console-log-debug/+page.md",
          "updates": []
        },
        {
          "id": "546efd1b-ad91-41e9-b7ab-641fb7c49ff9",
          "number": 36,
          "title": "Debug using forge test",
          "slug": "forge-test-debug",
          "folderName": "36-forge-test-debug",
          "description": "Introducing the Forge Debug Tool, this lesson explains how to use the debug functionality in Forge for in-depth analysis and step-through of smart contract code. It emphasizes the tool's utility in understanding specific elements in code for advanced debugging.",
          "duration": 2,
          "videoUrl": "EfoL48ZM2uM",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/36-forge-test-debug/+page.md",
          "updates": []
        },
        {
          "id": "3349af70-4777-4e65-9af8-ad603cae3313",
          "number": 37,
          "title": "Section recap",
          "slug": "recap",
          "folderName": "37-recap",
          "description": "A comprehensive recap of creating a provably fair lottery on the blockchain. The lesson revisits key components like custom errors, enums, private variables, constructor verbosity, raffle and Chainlink automation, and deployment on testnet, culminating in a complete overview of the project.",
          "duration": 6,
          "videoUrl": "fMDhz3CnIpQ",
          "rawMarkdownUrl": "/routes/foundry/4-smart-contract-lottery/37-recap/+page.md",
          "updates": []
        }
      ]
    }
  ],
  "createdAt": "2023-12-06T17:17:23.229Z",
  "updatedAt": "2023-12-06T17:17:23.229Z"
}