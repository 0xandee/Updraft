{
  "courseId": "assembly-opcodes-formal-verification",
  "slug": "assembly-opcodes-formal-verification",
  "createdAt": "2024-02-20T05:00:00.000Z",
  "updatedAt": "2024-02-20T23:54:19.282Z",
  "title": "Assembly, EVM Opcodes, and Formal Verification",
  "path": "content/learning-paths/solidity-developer.json",
  "githubUrl": "https://github.com/Cyfrin/assembly-evm-opcodes-and-formal-verification-course",
  "previewImg": "https://res.cloudinary.com/droqoz7lg/image/upload/v1708469922/Code_Pro_n31s2s.png",
  "duration": 1,
  "description": "Welcome to the repository for the Assembly, EVM Opcodes, and Formal Verification Course by Cyfrin Updraft!\n\nThis is the ultimate low-level course to become the top 1% of smart contract contract developers and security researchers. \n\n## Outcome\n* Be able to decompile a smart contract right from the raw bytecode\n* Be able to understand exactly how EVM opcodes work so you can write more gas-efficient code\n* Learn the Huff smart contract programming language\n* Be able to write formal verification in Halmos & Certora\n* Be able to understand the difference between Fuzzing & Formal Verification\n* Have an intermediate understanding of how to write Formal Verification tests for solidity ",
  "overview": {
    "learnings": "1. Why you should learn the EVM, Opcodes, Assembly, and Formal Verification\n2. How to decompile a smart contract\n3. How to read the binary of a smart contract - you don't even need to know solidity anymore! \n4. How to write in the huff and yul smart contract languages\n5. How to optimize your codebase for gas, know that you know what every opcode does\n6. How to build formal verification test suites with Halmos and Certora\n7. Understand the tradeoffs of using formal verification vs fuzzing \n8. How to check for invariants and formally prove them \n",
    "preRequisites": [
      "Required: A strong understanding of Solidity or Vyper ",
      "Preferred: The [Security and Auditing Course](https://updraft.cyfrin.io/courses/security) completed",
      "Nice to have: Advanced Foundry Skills "
    ]
  },
  "authors": [
    {
      "author": "content/authors/patrick-collins.json"
    }
  ],
  "sections": [
    {
      "sectionId": "assembly-evm-opcodes-and-formal-verification-introduction",
      "number": 1,
      "slug": "assembly-evm-opcodes-and-formal-verification-introduction",
      "title": "Introduction: Welcome to the Course! ",
      "lessons": [
        {
          "lessonId": "welcome",
          "number": 1,
          "slug": "welcome",
          "title": "Assembly, EVM Opcodes, and Formal Verification | Welcome!",
          "description": "Welcome to the course! ",
          "duration": 1,
          "videoUrl": "jv9up9fhEPfv2wWrK4Unv01xYQMzmPRxGQXZG72fu4zg",
          "markdownContent": "\\## Why EVM, Opcodes, and Formal Verification?\n\n* Become a top 1% smart contract developer\n* Understand exactly why certain gas optimizations work\n* Become a top 1% smart contract security researcher\n* Learn how to decompile smart contracts\n* Learn how to write in Huff and Yul low-level EVM languages\n* Learn how to formally verify smart contracts - PROVE that a bug does not exist for specific invariants!\n\n\\## Best Practices\n\n\\- Register for \\[Cyfrin Updraft]\\([https://updraft.cyfrin.io/](https://updraft.cyfrin.io/))\n\n```\n\\- USE THIS SITE!!! It's specfically made to make learning easier\n```\n\n\\- \\*\\*Follow the repository:\\*\\* While going through the course be 100% certain to follow along with the github repository. If you run into in an issue check the chronological-updates in the repo.\n\n\\- \\*\\*Be Active in the community:\\*\\* Ask questions and engage with other developers going through the course in the discussions tab, be sure to go and say hello or gm! This space is different from the other industries, you don't have to be secretive; communicate, network and learn with others :)\n\n\\- \\*\\*Learn at your own pace:\\*\\* It doesn't matter if it takes you a day, a week, a month or even a year. Progress >>> Perfection\n\n\\- \\*\\*Take Breaks:\\*\\* You will exhaust your mind and recall less if you go all out and watch the entire course in one sitting.\n\n```\n\\*\\*Suggested Strategy\\*\\* every 25 minutes take a 5 min break, and every 2 hours take a longer 30 min break\n```\n\n\\- \\*\\*Refer to Documentation:\\*\\* Things are constantly being updated, so whenever Patrick opens up some documentation, open it your end and maybe even have the code sample next to you.\n\n\\- \\*\\*Use ChatGPT and/or the course chat\\*\\*\n",
          "updates": [
            {
              "title": "Example Update!",
              "description": "Example Update!",
              "date": "2024-02-20T05:00:00.000Z"
            }
          ]
        }
      ]
    }
  ]
}